import streamlit as st
import pandas as pd
from data_manager.query_executor import QueryExecutor
from llm_processor import LLMProcessor
from data_manager.formatter import format_results
import os
import sys

# Add the root directory to the path so we can import modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# App title and configuration
st.set_page_config(
    page_title="Retail Data Assistant",
    page_icon="üõí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Title and description
st.title("üõí Retail Data Assistant")
st.markdown("""
    –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, 
    –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –µ–≥–æ –≤ SQL-–∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
""")

# Initialize components
@st.cache_resource
def get_query_executor():
    return QueryExecutor()

@st.cache_resource
def get_llm_processor():
    return LLMProcessor()

# Get instances
query_executor = get_query_executor()
llm_processor = get_llm_processor()

# Make sure the session state for query input exists
if 'query_input' not in st.session_state:
    st.session_state.query_input = ""

# Add temporary storage for example queries
if 'example_query' not in st.session_state:
    st.session_state.example_query = ""
    
# If we have a pending example, put it in the query_input field
if st.session_state.example_query:
    st.session_state.query_input = st.session_state.example_query
    st.session_state.example_query = ""  # Clear after use

# User input
user_query = st.text_area("–í–∞—à –∑–∞–ø—Ä–æ—Å:", 
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ —Ç–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", 
    height=100,
    key="query_input")

# Process button
if st.button("üìä –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
    if user_query:
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
            # Process with LLM
            try:
                st.subheader("–í–∞—à –∑–∞–ø—Ä–æ—Å:")
                st.info(user_query)
                
                # Generate SQL
                sql_query = llm_processor.generate_sql(user_query)
                
                st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å:")
                st.code(sql_query, language="sql")
                
                # Execute the query
                results = query_executor.execute_query(sql_query)
                
                # Format and display results
                if results is not None and len(results) > 0:
                    formatted_results = format_results(results)
                    
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    st.dataframe(formatted_results, use_container_width=True)
                    
                    # Download option
                    csv = formatted_results.to_csv(index=False)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ CSV",
                        data=csv,
                        file_name="results.csv",
                        mime="text/csv",
                    )
                else:
                    st.warning("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

# Sidebar with examples
with st.sidebar:
    st.header("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    example_queries = [
        "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
        "–ö–∞–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–º–µ—é—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –≤—ã—Ä—É—á–∫—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'?",
        "–°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∑–∞ –ø–µ—Ä–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª —ç—Ç–æ–≥–æ –≥–æ–¥–∞",
        "–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞?",
        "–ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —á–∞—â–µ –≤—Å–µ–≥–æ –ø–æ–∫—É–ø–∞—é—Ç –≤–º–µ—Å—Ç–µ —Å —Ö–ª–µ–±–æ–º?",
        "–ü–æ–∫–∞–∂–∏ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ–¥–∞–∂ –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥",
        "–ö–∞–∫–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ –∏ —á—Ç–æ –æ–Ω–∏ –ø–æ–∫—É–ø–∞–ª–∏?",
        "–ö–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏–Ω–æ—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞ –º–∏–Ω–∏-–º–∞—Ä–∫–µ—Ç?",
        "–°—Ä–∞–≤–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª",
        "–£ –∫–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ú–æ—Å–∫–≤—ã?"
    ]
    
    for i, query in enumerate(example_queries):
        if st.button(f"–ü—Ä–∏–º–µ—Ä {i+1}", key=f"example_{i}"):
            # Store the example in a temporary variable
            st.session_state.example_query = query
            # Need to rerun to update the text area
            st.rerun()

    st.markdown("---")
    st.markdown("### –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
        –≠—Ç–æ MVP –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∏ 
        —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
        
        **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
        - Streamlit
        - OpenAI GPT-4o mini
        - DuckDB
        - Python
    """) 